name: build push amd deploy image

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

permissions:
  id-token: write
  contents: read
env:
  AWS_REGION: us-east-1
  AWS_ROLE: ${{ secrets.AWS_ACTION_ROLE }}
  ECR_REPO_NAME: dev
  IMAGE_TAG: ${{ github.run_number }}
  ECR_CLUSTER_NAME: nginx-cluster
  ECR_SERVICE_NAME: nginx-service
 

jobs:
  Build:
    runs-on: ubuntu-latest    #github runner
    steps:
      - name: clone repo
        uses: actions/checkout@v3
      - name: AWS credential config
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ env.AWS_ROLE }}    #OIDC
          aws-region: ${{ env.AWS_REGION}}
      - name: logging to ecr
        uses: aws-actions/amazon-ecr-login@v1
        id: ecr-login

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: "fs"  # Scans filesystem (repo)
          format: "table"  # Output format (table, json, sarif)
          exit-code: "0"   # Fails if vulnerabilities found
          severity: "CRITICAL,HIGH"  # Only fail on critical/high
          ignore-unfixed: true  # Ignore unfixed vulnerabilities

      - name: Build and tag image
        id: build-and-push
        run: |
          docker build -t ${{ steps.ecr-login.outputs.registry }}/${{ env.ECR_REPO_NAME}}:${{ env.IMAGE_TAG }} .
          
      - name: scan docker image for vulnerabilities
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: "${{ steps.ecr-login.outputs.registry }}/${{ env.ECR_REPO_NAME}}:${{ env.IMAGE_TAG }}"  # Scans the built image
          format: "table"
          exit-code: "0"
          severity: "CRITICAL,HIGH"

      - name: Push image to ecr
        run: |
          docker push ${{ steps.ecr-login.outputs.registry }}/${{ env.ECR_REPO_NAME}}:${{ env.IMAGE_TAG }}
      
      - name: Store image in github env
        run: echo "Image=${{ steps.ecr-login.outputs.registry }}/${{ env.ECR_REPO_NAME}}:${{ env.IMAGE_TAG }}" >> $GITHUB_ENV
      
      - name: Render ECS task definition with new image
        id: render-task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ecs-task-def.json
          container-name: nginx  
          image: ${{ steps.ecr-login.outputs.registry }}/${{ env.ECR_REPO_NAME}}:${{ env.IMAGE_TAG }}     
  
  
  Deploy:
    runs-on: ubuntu-latest
    needs: Build 
    steps: 
      - name: Deploy to ECS
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
           task-definition: ${{ steps.render-task-def.outputs.task-definition }}
           service: ${{ env.ECR_SERVICE_NAME }}
           cluster: ${{ env.ECR_CLUSTER_NAME }}
           wait-for-service-stability: true
           force-new-deployment: true
        

